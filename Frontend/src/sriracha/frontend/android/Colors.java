package sriracha.frontend.android;

import android.graphics.Color;

import java.util.ArrayList;
import java.util.Random;

/**
 * Static class used to generate colors for the results viewer.
 * Different plots on the graph are colored differently for easy differentiation.
 * This class simply generates a bunch of colors the first time it is queried.
 * The colors are generated by simple hue rotation.
 * A "secondary" list of colors is also generated, matching the hue of the primary
 * list, but with lower saturation. This is currently used for the imaginary
 * component of a plot with both real and imaginary curves, while the real curve
 * has the fully-saturated color.
 */
public class Colors
{
    private static ArrayList<Integer> colors;
    private static ArrayList<Integer> desaturatedColors;
    static float randHueSpacer;
    static float randHueStart;

    static
    {
        colors = new ArrayList<Integer>();
        desaturatedColors = new ArrayList<Integer>();
        Random r = new Random();
        randHueSpacer = r.nextFloat() * 40 + 35;
        randHueStart = r.nextFloat() * 360;

        for (float hue = 0; hue < 360; hue += 60)
        {
            colors.add(Color.HSVToColor(new float[]{hue, 1, 1}));
        }
        for (float hue = 0; hue < 360; hue += 60)
        {
            desaturatedColors.add(Color.HSVToColor(new float[]{hue, 0.5f, 1}));
        }
    }

    public static int get(int index)
    {
        index %= colors.size();
        return colors.get(index);
    }

    public static int getSecondary(int index)
    {
        index %= desaturatedColors.size();
        return desaturatedColors.get(index);
    }

    public static int randomColor()
    {
        return randomColor(1f, 1f);
    }

    static int randCalls = 0;

    public static int randomColor(float saturation, float alpha)
    {
        Random r = new Random();
        return Color.HSVToColor(new float[]{(randHueStart + (randCalls++ * randHueSpacer)) % 360, saturation, alpha});
    }
}
